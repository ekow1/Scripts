# GitHub Actions Environment Variables Example
# Copy this file to .env and fill in your actual values
# DO NOT commit the actual .env file to version control

# =============================================================================
# üîê SSH CONFIGURATION
# =============================================================================

# Your private SSH key for VM access (add to GitHub Secrets as VM_SSH_PRIVATE_KEY)
# Generate with: ssh-keygen -t rsa -b 4096 -C "github-actions@your-domain.com"
VM_SSH_PRIVATE_KEY="-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
QyNTUxOQAAACD... (your private key content here)
-----END OPENSSH PRIVATE KEY-----"

# =============================================================================
# üåê VM IP ADDRESSES
# =============================================================================

# Production VM IP address (add to GitHub Secrets as PRODUCTION_VM_IP)
PRODUCTION_VM_IP="192.168.1.100"

# Staging VM IP address (add to GitHub Secrets as STAGING_VM_IP)
STAGING_VM_IP="192.168.1.101"

# =============================================================================
# üîß VM CONFIGURATION
# =============================================================================

# VM username (default: ubuntu)
VM_USERNAME="ubuntu"

# SSH port (default: 22)
SSH_PORT="22"

# =============================================================================
# üê≥ DOCKER CONFIGURATION
# =============================================================================

# Docker registry credentials (if needed)
DOCKER_REGISTRY="docker.io"
DOCKER_USERNAME="your-docker-username"
DOCKER_PASSWORD="your-docker-password"

# =============================================================================
# üìä MONITORING & LOGGING
# =============================================================================

# Slack webhook for notifications (optional)
SLACK_WEBHOOK_URL="https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"

# Email notifications (optional)
SMTP_SERVER="smtp.gmail.com"
SMTP_PORT="587"
SMTP_USERNAME="your-email@gmail.com"
SMTP_PASSWORD="your-app-password"

# =============================================================================
# üõ°Ô∏è SECURITY CONFIGURATION
# =============================================================================

# Firewall ports to open
FIREWALL_PORTS="22,80,443,8080"

# Fail2Ban configuration
FAIL2BAN_MAX_RETRIES="3"
FAIL2BAN_BANTIME="3600"

# =============================================================================
# üìã GITHUB SECRETS SETUP GUIDE
# =============================================================================

# To add these to GitHub Secrets:
# 1. Go to your repository on GitHub
# 2. Navigate to Settings ‚Üí Secrets and variables ‚Üí Actions
# 3. Click "New repository secret"
# 4. Add each secret with the exact name shown below:

# Required Secrets:
# - VM_SSH_PRIVATE_KEY: Your private SSH key content
# - PRODUCTION_VM_IP: Your production VM IP address
# - STAGING_VM_IP: Your staging VM IP address (optional)

# Optional Secrets:
# - SLACK_WEBHOOK_URL: For Slack notifications
# - SMTP_USERNAME: For email notifications
# - SMTP_PASSWORD: For email notifications

# =============================================================================
# üöÄ DEPLOYMENT EXAMPLES
# =============================================================================

# Example 1: Deploy to production
# Trigger: Push changes to scripts/setup-vm-and-docker.sh
# Result: Automatic deployment to PRODUCTION_VM_IP

# Example 2: Manual deployment to staging
# Trigger: Manual workflow dispatch
# Inputs: 
#   - force_deploy: true
#   - target_environment: staging
# Result: Deployment to STAGING_VM_IP

# Example 3: Force deployment to production
# Trigger: Manual workflow dispatch
# Inputs:
#   - force_deploy: true
#   - target_environment: production
# Result: Force deployment to PRODUCTION_VM_IP

# =============================================================================
# üîç TESTING YOUR SETUP
# =============================================================================

# Test SSH connection:
# ssh -i ~/.ssh/id_rsa ubuntu@YOUR_VM_IP

# Test script locally:
# chmod +x scripts/setup-vm-and-docker.sh
# sudo ./scripts/setup-vm-and-docker.sh

# Check Docker installation:
# docker --version
# docker info

# Check firewall status:
# sudo ufw status

# Check fail2ban status:
# sudo fail2ban-client status
