name: Deploy VM Setup Script

on:
  # Run on push to main branch when setup script changes
  push:
    branches: [ main ]
    paths:
      - 'scripts/setup-vm-and-docker.sh'
      - '.github/workflows/deploy-vm-setup.yml'
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean
      target_environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify script format
      run: |
        echo "üîç Checking script format..."
        file scripts/setup-vm-and-docker.sh
        echo "üìã Script first few lines:"
        head -5 scripts/setup-vm-and-docker.sh
        echo "üìã Script last few lines:"
        tail -5 scripts/setup-vm-and-docker.sh
      
    - name: Check if script has changed
      id: check-changes
      run: |
        echo "üîç Checking for changes..."
        echo "Event type: ${{ github.event_name }}"
        echo "Force deploy: ${{ github.event.inputs.force_deploy }}"
        
        if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.force_deploy }}" == "true" ]; then
          echo "‚úÖ Force deployment requested"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # Check if we're in a push event and have valid commit hashes
          if [ "${{ github.event_name }}" == "push" ] && [ -n "${{ github.event.before }}" ] && [ -n "${{ github.event.after }}" ]; then
            echo "üìã Checking changes between commits..."
            echo "Before: ${{ github.event.before }}"
            echo "After: ${{ github.event.after }}"
            
            # Check if the commits exist
            if git rev-parse --verify "${{ github.event.before }}" >/dev/null 2>&1 && git rev-parse --verify "${{ github.event.after }}" >/dev/null 2>&1; then
              if git diff --name-only "${{ github.event.before }}" "${{ github.event.after }}" | grep -q "scripts/setup-vm-and-docker.sh"; then
                echo "‚úÖ Changes detected in setup script"
                echo "has_changes=true" >> $GITHUB_OUTPUT
              else
                echo "‚è≠Ô∏è No changes in setup script"
                echo "has_changes=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "‚ö†Ô∏è Invalid commit hashes, assuming changes"
              echo "has_changes=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è No valid commit information, assuming changes"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Setup SSH
      if: steps.check-changes.outputs.has_changes == 'true'
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
        
    - name: Deploy to VM
      if: steps.check-changes.outputs.has_changes == 'true'
      run: |
        # Set target based on input or default to production
        TARGET_ENV="${{ github.event.inputs.target_environment || 'production' }}"
        
        # Get VM IP from secrets (you can add different IPs for different environments)
        if [ "$TARGET_ENV" = "staging" ]; then
          VM_IP="${{ secrets.STAGING_VM_IP }}"
        else
          VM_IP="${{ secrets.PRODUCTION_VM_IP }}"
        fi
        
        echo "üöÄ Deploying to $TARGET_ENV environment (IP: $VM_IP)"
        
        # Copy script to VM
        echo "üì§ Copying script to VM..."
        scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 scripts/setup-vm-and-docker.sh ubuntu@$VM_IP:/tmp/
        
        # Test SSH connection
        echo "üîç Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$VM_IP "echo 'SSH connection successful'"
        
        # Execute script on VM
        echo "üöÄ Executing setup script on VM..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$VM_IP << 'EOF'
          set -e  # Exit on any error
          
          echo "üîê Starting VM setup deployment..."
          echo "üìã Current directory: $(pwd)"
          echo "üìã Script location: /tmp/setup-vm-and-docker.sh"
          
          # Check if script exists and is readable
          if [ ! -f /tmp/setup-vm-and-docker.sh ]; then
            echo "‚ùå Script not found at /tmp/setup-vm-and-docker.sh"
            exit 1
          fi
          
          # Make script executable
          echo "üîß Making script executable..."
          chmod +x /tmp/setup-vm-and-docker.sh
          
          # Verify script is executable
          if [ ! -x /tmp/setup-vm-and-docker.sh ]; then
            echo "‚ùå Script is not executable"
            exit 1
          fi
          
          # Create backup of current setup
          echo "üìã Creating backup..."
          sudo cp /tmp/setup-vm-and-docker.sh /tmp/setup-vm-and-docker.sh.backup.$(date +%Y%m%d_%H%M%S)
          
          # Execute the setup script
          echo "‚ö° Executing setup script..."
          sudo bash /tmp/setup-vm-and-docker.sh
          
          echo "‚úÖ VM setup deployment completed!"
          echo "üöÄ Ready for Docker Swarm deployments!"
          echo "üìã Nginx management: /opt/manage-nginx.sh"
        EOF
        
    - name: Skip deployment
      if: steps.check-changes.outputs.has_changes == 'false'
      run: |
        echo "‚è≠Ô∏è No changes detected in setup script. Skipping deployment."
        echo "To force deployment, use the manual trigger with 'Force deployment' option."
